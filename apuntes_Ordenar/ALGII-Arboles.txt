====================================
         ÁRBOLES - A&PII
====================================

------------------------------------
     DEFINICIÓN GENERAL DE ÁRBOL
------------------------------------

Un árbol `T` es un conjunto de nodos que almacenan elementos, con una relación **padre-hijo** que cumple las siguientes propiedades:

• Si `T` no está vacío, tiene un nodo especial llamado **raíz**, que no tiene padre.  
• Todo nodo `v` (≠ raíz) tiene exactamente un padre `w`.  
• Todo nodo con padre `w` es un **hijo** de `w`.

Modelado en informática:
• Un árbol es un modelo abstracto de **estructura jerárquica**.

Aplicaciones:
• Gráficos organizacionales.  
• Sistemas de archivos.  
• Entornos de programación.  

------------------------------------
        TERMINOLOGÍA BÁSICA
------------------------------------

• **Raíz**: único nodo sin padre.  
• **Nodo interno**: tiene al menos un hijo.  
• **Nodo externo (hoja)**: no tiene hijos (no puede formar subárbol).  
• **Ancestros**: padre, abuelo, bisabuelo, etc.  
• **Descendientes**: hijo, nieto, bisnieto, etc.  
• **Profundidad** de un nodo: cantidad de ancestros.  
• **Altura del árbol**: profundidad máxima de sus nodos.  
• **Peso del árbol**: también puede referirse a su altura.  
• **Subárbol**: cualquier nodo junto con todos sus descendientes.  
• **Arco (edge)**: relación (u, v) donde `u` es padre de `v`.  
• **Camino (path)**: secuencia de nodos donde cada par consecutivo está conectado por un arco.  

Relación jerárquica:  
• Si existe un camino que conecta `A` y `B`, entonces están relacionados jerárquicamente.

------------------------------------
       ÁRBOL ORDENADO
------------------------------------

• Un árbol ordenado mantiene un orden específico entre los hijos.  
• Ejemplo: Un libro → dividido en secciones → capítulos → párrafos.  
• Un índice de libro se puede modelar de forma más eficiente como un árbol que como un arreglo.

► En matemática discreta, un árbol puede verse como un conjunto parcialmente ordenado.

------------------------------------
        TAD ÁRBOL (TAD Tree)
------------------------------------

Definimos un TAD árbol usando el concepto de **posición** como abstracción para un nodo.  
Cada posición almacena un elemento y mantiene relaciones padre-hijo.

Métodos del TAD Árbol:

▶ Métodos de acceso:
• `getElement()` – retorna el elemento almacenado en la posición.  
• `position root()` – retorna la raíz del árbol.  
• `position parent(p)` – retorna el padre de `p`.  
• `Iterable children(p)` – retorna los hijos de `p`.  
• `int numChildren(p)` – cantidad de hijos de `p`.

▶ Métodos genéricos:
• `int size()` – número total de nodos.  
• `boolean isEmpty()` – si el árbol está vacío.  
• `Iterator<E> iterator()` – iterador del árbol.  
• `Iterable positions()` – permite iterar por posiciones.

⚠️ *Nota sobre interfaces*:  
Los métodos que terminan en `-able` (como `Iterable`) son interfaces. Podemos definir nuevas como `hermanos(p)`, que agrupe nodos al mismo nivel con un ancestro común.

▶ Métodos de consulta:
• `isInternal(p)` – retorna `true` si `p` es interno.  
• `isExternal(p)` – retorna `true` si `p` es hoja.  
• `isRoot(p)` – retorna `true` si `p` es la raíz.

▶ Métodos de actualización:  
Se pueden definir operaciones adicionales (por ejemplo, insertar, eliminar nodos) según la implementación concreta del TAD.

------------------------------------
   INTERFAZ JAVA - TAD ÁRBOL
------------------------------------

```java
public interface Tree<E> extends Iterable<E> {
    Position<E> root();
    Position<E> parent(Position<E> p) throws IllegalArgumentException;
    Iterable<Position<E>> children(Position<E> p) throws IllegalArgumentException;

    int numChildren(Position<E> p) throws IllegalArgumentException;

    boolean isInternal(Position<E> p) throws IllegalArgumentException;
    boolean isExternal(Position<E> p) throws IllegalArgumentException;
    boolean isRoot(Position<E> p) throws IllegalArgumentException;

    int size();
    boolean isEmpty();
    Iterator<E> iterator();  // Requiere implementación por ser Iterable
    Iterable<Position<E>> positions();
}
CÁLCULO DE PROFUNDIDAD Y ALTURA DEL ÁRBOL
► Profundidad de una posición p:
• Si p es la raíz → profundidad = 0.
• Si no → profundidad = 1 + profundidad del padre de p.

► Altura del árbol T:
• Es la máxima profundidad entre todas sus posiciones.
• Si el árbol está vacío → altura = 0.

⚠️ Ver códigos de implementación en el libro: páginas 314, 315 y 316.

====================================
           ÁRBOLES BINARIOS
====================================

------------------------------------
           PROPIEDADES
------------------------------------

- Cada nodo interno tiene como máximo dos hijos.
- Los hijos de un nodo son de orden fijo: *hijo izquierdo* e *hijo derecho*.
- En una búsqueda binaria, al dividir siempre a la mitad, se reduce el problema de forma logarítmica.

Aplicaciones comunes:
• Expresiones aritméticas (respetan precedencia y tienen dos operandos).
• Procesos de decisión.
• Búsquedas eficientes.

------------------------------------
  ÁRBOL DE EXPRESIONES ARITMÉTICAS
------------------------------------

- Nodos internos: operadores.
- Nodos externos (hojas): operandos.

Ejemplo: árbol para la expresión  
    (2 × (a - 1) + (3 × b))

------------------------------------
        ÁRBOL DE DECISIÓN
------------------------------------

- Nodos internos: preguntas con respuesta SÍ / NO.
- Nodos externos (hojas): decisiones.

Ejemplo:  
    ¿Salir a comer? → (Sí/No) → (Elección del lugar / Quedarse en casa)

-----------------------------------------------
     PROPIEDADES MATEMÁTICAS DE LOS ÁRBOLES
-----------------------------------------------

Notación:
• n : cantidad total de nodos  
• e : cantidad de nodos externos (hojas)  
• i : cantidad de nodos internos  
• h : altura del árbol

Relaciones fundamentales (válidas para árboles binarios):

    - e = i + 1  
    - n = 2e - 1  
    - h ≤ i  
    - h ≤ (n - 1) / 2  
    - e ≤ 2^h  
    - h ≥ log₂(e)  
    - h ≥ log₂(n + 1) - 1

Observaciones:
• Un árbol puede estar *balanceado* o *desbalanceado* (también llamado degenerado si se convierte en una lista).
• Si está balanceado, cada elección divide el problema a la mitad, manteniendo la eficiencia.
• El *orden de inserción* y la *elección de la raíz* son claves para que el árbol se mantenga balanceado.
• Existen métodos de **balanceo automático** que preservan la complejidad logarítmica (ej: AVL, Red-Black Trees).

-----------------------------------------------
   DEFINICIÓN RECURSIVA DE ÁRBOL BINARIO
-----------------------------------------------

Un árbol binario puede definirse recursivamente como:

1. Un árbol vacío, o  
2. Un árbol no vacío que tiene:
    - Una raíz `r` que almacena un elemento.
    - Dos subárboles binarios:
        • Subárbol izquierdo.
        • Subárbol derecho.

*Nota:* Uno o ambos subárboles pueden estar vacíos.

====================================
        TAD ÁRBOL BINARIO
====================================

- El TAD Árbol Binario **hereda** del TAD Árbol.

- Métodos adicionales:
    • left(p)         --> Retorna el hijo izquierdo de p.
    • right(p)        --> Retorna el hijo derecho de p.
    • sibling(p)      --> Retorna el hermano de p.

  * Ver códigos en el libro, páginas 319-320.

- Estos métodos retornan `null` si:
    • p no tiene hijo izquierdo (left),
    • p no tiene hijo derecho (right),
    • p no tiene hermano (sibling).

- Los métodos de actualización dependen de la estructura de datos que implemente el TAD Árbol Binario.

------------------------------------
  RECORRIDOS DE UN ÁRBOL BINARIO
------------------------------------

Existen tres maneras principales de recorrer un árbol:

    1. Pre-orden
    2. In-orden
    3. Post-orden

  * Mnemotecnia (forma diagonal):

    - Pre-orden:  R  I  D  --> (Raíz - Izquierda - Derecha)
    - In-orden:   I  R  D  --> (Izquierda - Raíz - Derecha)
    - Post-orden: I  D  R  --> (Izquierda - Derecha - Raíz)

------------------------------------
   OBSERVACIONES ADICIONALES
------------------------------------

- Aunque estos recorridos son comunes en árboles binarios (por su simpleza), también se pueden aplicar a árboles con más de dos hijos.

- En árboles con múltiples ramas, los recorridos permiten una búsqueda más eficiente, ya que se descartan más nodos innecesarios.

- La posición de la raíz **cambia** según el recorrido, para mantener el patrón diagonal de la mnemotecnia.

- Lógica de recorrido (resumen iterativo):
    1. Comenzar en la raíz.
    2. Visitar el hijo izquierdo.
    3. Si no hay más hijos a la izquierda, ir al derecho.
    4. Si se recorrieron ambos hijos, volver al nodo padre.
    5. Continuar hacia el siguiente subárbol derecho.
    6. Repetir hasta recorrer todo el árbol.


	Pre : 		RID
	IN:    		IRD
	POST: 	IDR
	
====================================
        RECORRIDOS DE ÁRBOLES
====================================

Un recorrido consiste en visitar todos los nodos de un árbol de manera sistemática, siguiendo un orden predefinido.

------------------------------------
         RECORRIDO PRE-ORDEN
------------------------------------

- En el recorrido **pre-orden**, se visita un nodo *antes* que sus descendientes.

  Orden:      RAÍZ → IZQUIERDA → DERECHA

- Aplicación: imprimir un documento estructurado.

- Notas adicionales:
    • Aunque los árboles binarios son los más simples para entender estos recorridos, también se pueden aplicar a árboles con múltiples hijos.
    • En árboles con más ramas, los recorridos permiten mejorar el proceso de búsqueda, ya que descartan más datos rápidamente.
    • Durante el recorrido:
        1. Se visita la raíz.
        2. Se recorre el subárbol izquierdo.
        3. Al finalizar, se recorre el subárbol derecho.
        4. Este proceso se repite de forma iterativa o recursiva hasta visitar todos los nodos.

------------------------------------
         RECORRIDO EN-ORDEN
------------------------------------

- En el recorrido **en-orden**, se visita un nodo *después* de recorrer el subárbol izquierdo, y *antes* del subárbol derecho.

  Orden:      IZQUIERDA → RAÍZ → DERECHA

- Aplicación:
    • Dibujar un árbol binario:
        - x(v) = rango de orden del nodo v.
        - y(v) = profundidad del nodo v.
    • Impresión de expresiones aritméticas:
        - Imprimir el operando u operador al visitar el nodo.
        - Imprimir "(" antes del subárbol izquierdo.
        - Imprimir ")" después del subárbol derecho.

- Lógica del recorrido:
    1. Se desciende hacia la izquierda todo lo posible hasta encontrar una **hoja**.
    2. Luego se visita su raíz.
    3. Se pasa al hijo derecho (si lo hay), y se repite el proceso.
    4. Se sigue iterando hasta recorrer completamente el árbol.

------------------------------------
        RECORRIDO POST-ORDEN
------------------------------------

- En el recorrido **post-orden**, se visita un nodo *después* de visitar todos sus descendientes.

  Orden:      IZQUIERDA → DERECHA → RAÍZ

- Aplicación:
    • Calcular el espacio utilizado por archivos, carpetas y subcarpetas en una computadora.

- Lógica del recorrido:
    1. Se recorre primero el subárbol izquierdo.
    2. Luego se recorre el subárbol derecho.
    3. Finalmente se visita la raíz.
    4. Se repite este patrón para cada subárbol del árbol.

------------------------------------
     RESUMEN DE LOS ÓRDENES
------------------------------------

    PRE-ORDEN:     RAÍZ → IZQ → DER    (RID)
    EN-ORDEN:      IZQ → RAÍZ → DER    (IRD)
    POST-ORDEN:    IZQ → DER → RAÍZ    (IDR)


**************************
====================================
      IMPLEMENTACIÓN DE ÁRBOLES
====================================

------------------------------------
1. ESTRUCTURA ENLAZADA (GENERAL)
------------------------------------

Cuando el árbol **no es binario** (p. ej. ternario o N-ario) se requiere
una lista que actúe como índice a los distintos hijos; esto añade
complejidad al gestionar las referencias.

*Un nodo* se modela con un objeto que almacena:
    • Elemento  
    • Referencia al **padre**  
    • **Secuencia de hijos** (lista, vector, etc.)  

Los nodos implementan el **TAD Posición**.

----------------------------------------------
2. ESTRUCTURA ENLAZADA PARA ÁRBOLES BINARIOS
----------------------------------------------

Siguiendo una estructura fija (izquierdo / derecho) se simplifican las
consultas; por ejemplo, contar hojas basta con detectar nodos cuyo
hijo izquierdo y hijo derecho son `null`.

*Un nodo* almacena:
    • Elemento  
    • Referencia al **padre**  
    • Referencia al **hijo izquierdo**  
    • Referencia al **hijo derecho**  

Los nodos también implementan el **TAD Posición**.

----------------------------------------------
3. REPRESENTACIÓN CON ARREGLOS (B-TREE)
----------------------------------------------

Ventaja: acceso directo por índice.  
Desventaja: se deben reservar posiciones para *todos* los nodos
(posiciones vacías ⇒ derroche de memoria).

Reglas de mapeo en un arreglo `A`:

    rank(root)              = 0  
    rank(hijo izquierdo)    = 2 · rank(padre) + 1  
    rank(hijo derecho)      = 2 · rank(padre) + 2  

► Ejemplo simplificado  
(arreglo que representa `[(1+3)*4] / [(9-5)+2]`):

    Índice :  0   1   2   3   4   5   6   7   8
    Conten.:  /   *   +   +   4   -   2   3   1   ...  

----------------------------------------------
4. RECORRIDO TOUR DE EULER
----------------------------------------------

• Recorrido **genérico** para un árbol (binario o no).  
• Camina “alrededor” del árbol y **visita cada nodo tres veces**  
  (antes de entrar al subárbol izquierdo, entre subárboles,
  y al salir del subárbol derecho).  

Origen histórico: problema de los *Siete Puentes* de Königsberg
(siglo XVIII), estudiado por Euler.

----------------------------------------------
RESUMEN
----------------------------------------------

- **Linked structure**  
  • Árbol N-ario: lista de hijos.  
  • Árbol binario: referencias fijas (`left`, `right`).

- **Array structure**  
  • Fórmulas de índice (`2i+1`, `2i+2`).  
  • Ahorra punteros, gasta memoria en huecos.

- **Tour de Euler**  
  • Esqueleto para definir Pre-, In- y Post-orden en un mismo marco.  


Recurso; https://www.techiedelight.com/eulerian-path-undirected-graph/
