#Tad MAp
• Un mapa es un tipo abstracto de datos diseñado para almacenar y recuperar
de manera eficiente valores basados en una clave de búsqueda de
identificación única para cada uno.
• Específicamente, un mapa almacena pares de valores clave (k, v), que
llamamos entradas, donde k es la clave y v es su valor correspondiente.
• Se requiere que las claves sean únicas, de modo que la asociación de claves a
valores defina un mapeo.
• La web como un mapa cuyas entradas son las páginas web: La clave de una
página es su URL (por ejemplo, http://datastructures.net/) y su valor es el
contenido de la página.

• Vemos la web como un mapa cuyas entradas son las páginas web: La
clave de una página es su URL (por ejemplo, http://datastructures.net/) y
su valor es el contenido de la página.

##Mapas o arreglos asociativos
• La diferencia con un arreglo estándar, es que la clave de un mapa no necesita ser numérica y no
designa directamente una posición dentro de la estructura.
• El sistema de información de una universidad se basa en algún tipo de identificación de estudiante
como clave que se asigna al registro asociado de ese estudiante (como el nombre del estudiante, la
dirección y las calificaciones del curso) que sirve como valor.
• El sistema de nombres de dominio (DNS) asigna un nombre de host, como www.ing.unp.edu.ar, a una
dirección de Protocolo de Internet (IP), como 170.210.88.21.
• Un sitio de redes sociales generalmente se basa en un nombre de usuario (no numérico) como clave
que se puede asignar de manera eficiente a la información asociada de un usuario en particular.
• La base de clientes de una empresa puede almacenarse como un mapa, con el número de cuenta de
un cliente o la identificación de usuario única como clave, y un registro con la información del cliente
como valor. El mapa permitiría a un representante de servicio acceder rápidamente al registro de un
cliente, dada la clave.
• Un sistema de gráficos por computadora puede asignar un nombre de color, como 'turquesa', a la
tripla de números que describe la representación RGB (rojo-verde-azul) del color, como (64, 224, 208).

Metodos:
• size( ): Returns the number of entries in M.
• isEmpty( ): Returns a boolean indicating whether M is empty.
• get(k): Returns the value v associated with key k, if such an entry exists; otherwise
returns null.
• put(k, v): If M does not have an entry with key equal to k, then adds entry (k,v) to M
and returns null; else, replaces with v the existing value of the entry with key equal
to k and returns the old value.
• remove(k): Removes from M the entry with key equal to k, and returns its value; if M
has no such entry, then returns null.
• keySet( ): Returns an iterable collection containing all the keys stored in M.
• values( ): Returns an iterable collection containing all the values of entries stored in
M (with repetition if multiple keys map to the same value).
• entrySet( ): Returns an iterable collection containing all the key-value entries in M.

• Observemos que cada una de las operaciones get(k), put(k, v) y
remove(k) devuelve el valor existente asociado con la clave k, si el mapa
tiene dicha entrada y, de lo contrario, devuelve NULL.
• Esto introduce ambigüedad en una aplicación para la que se permite
NULL como valor natural asociado con una clave k.
• Es decir, si existe una entrada (k, NULL) en un mapa, entonces la
operación get(k) devolverá un valor nulo, y no porque no pudo
encontrar la clave, sino porque encontró la clave y está devolviendo su
valor asociado.

## Interfaz Java de Map

public interface Map<K,V> {

  /**
   * Returns the number of entries in the map.
   * @return number of entries in the map
   */
  int size();

  /**
   * Tests whether the map is empty.
   * @return true if the map is empty, false otherwise
   */
  boolean isEmpty();

  /**
   * Returns the value associated with the specified key, or null if no such entry exists.
   * @param key  the key whose associated value is to be returned
   * @return the associated value, or null if no such entry exists
   */
  V get(K key);

  /**
   * Associates the given value with the given key. If an entry with
   * the key was already in the map, this replaced the previous value
   * with the new one and returns the old value. Otherwise, a new
   * entry is added and null is returned.
   * @param key    key with which the specified value is to be associated
   * @param value  value to be associated with the specified key
   * @return the previous value associated with the key (or null, if no such entry)
   */
  V put(K key, V value);

  /**
   * Removes the entry with the specified key, if present, and returns
   * its associated value. Otherwise does nothing and returns null.
   * @param key  the key whose entry is to be removed from the map
   * @return the previous value associated with the removed key, or null if no such entry exists
   */
  V remove(K key);

  /**
   * Returns an iterable collection of the keys contained in the map.
   *
   * @return iterable collection of the map's keys
   */
  Iterable<K> keySet();

  /**
   * Returns an iterable collection of the values contained in the map.
   * Note that the same value will be given multiple times in the result
   * if it is associated with multiple keys.
   *
   * @return iterable collection of the map's values
   */
  Iterable<V> values();

  /**
   * Returns an iterable collection of all key-value entries of the map.
   *
   * @return iterable collection of the map's entries
   */
  Iterable<Entry<K,V>> entrySet();
}
## Ejemplo Contar la frecuencia de palabras
• Como caso de estudio para usar un mapa, consideremos el problema
de contar el número de ocurrencias de palabras en un documento.
• Esta es una tarea estándar cuando se realiza un análisis estadístico de
un documento, por ejemplo, al categorizar un correo electrónico o un
artículo de noticias.
• Un mapa es una estructura de datos ideal para usar aquí, ya que
podemos usar palabras como claves y el conteo de palabras como
valores

• Comenzamos con un mapa vacío, asignando palabras a sus
frecuencias enteras.
• Primero escaneamos la entrada, considerando los caracteres
alfabéticos adyacentes como palabras, que luego convertimos a
minúsculas.
• Para cada palabra encontrada, intentamos recuperar su frecuencia
actual del mapa usando el método get, con una palabra aún no vista
que tiene frecuencia cero.
• Luego (re) establecemos su frecuencia para que sea una más, para
reflejar la aparición actual de la palabra.
• Después de procesar toda la entrada, recorremos el entrySet() del
mapa para determinar qué palabra tiene más ocurrencias.

-----------------------------------------------------


####### HASHCODE
Ver Hash en Kernigan y Ritchie

Ver Donald Knuth -> usa un numero primo para la umatoria de ascii, con esto logra una distribucion normalizada

Ejemplo nombre y peso ASCII , para crear un calve->valor
	Nombre		Modulo 10
1	TOM	240	0
2	LUK	236	6
3	CAR	214	4
4	NIC	218	8
5	ENZ	237	7
6	JAI	212	2
7	JOA	218	8
8	JOA	218	8
9	AXE	222	2

Tenemos problemas ya que hay dos datos con el mismo valor
si creamos un arreglo con los datos, lo que hicimos con esta hash table, fue crear claves "caprichosas" que nos ayudan a identicar inequivocamente 
a su vez cada vez que yo presento una clave, divido mi problema en partes.  Es una manera de eficientizar mi busqueda.

Si no hay colision -> encuentro el dato directamente, si hay colision igualmente mi cantidad de datos a revisar igualmente es mas chica

--##Tabla Hash
• Presentamos una de las estructuras de datos más eficientes para
implementar un mapa, y es la que más se usa en la práctica.
• Intuitivamente, un mapa M admite la abstracción de usar claves como
"direcciones" que ayudan a localizar una entrada.
• Si pensamos en un entorno restringido de n Є (0 - N-1) entradas de enteros
con n ≤ N. En este caso, podemos representar el mapa usando una tabla de
búsqueda de longitud N


codigo hash desplazamiento ciclico
una implementacion


static int hashcode(String s){
	int h=0;
	for (int i= 0; i<s.lenght(); i++){
		h=(h << 5) | (h>>> 27);
		h += (int) s.charAt(i);
	}
	return h;
}